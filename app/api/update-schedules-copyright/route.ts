import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

// POST /api/update-schedules-copyright - Update existing schedules with new copyright format
export async function POST() {
  try {
    console.log('üîç Updating existing schedules with new copyright format...');
    
    // Import supabase directly
    const { supabaseAdmin } = await import('@/lib/db/supabase');
    
    // Get all schedules with post_message
    const { data: schedules, error: fetchError } = await supabaseAdmin
      .from('schedules')
      .select('id, post_message, channel_name')
      .not('post_message', 'is', null);
    
    if (fetchError) {
      console.log('‚ùå Database fetch error:', fetchError);
      return NextResponse.json({
        success: false,
        error: 'Database fetch error',
        details: fetchError
      });
    }
    
    console.log('‚úÖ Found schedules with post_message:', schedules?.length || 0);
    
    let updatedCount = 0;
    const errors = [];
    
    // Process each schedule
    for (const schedule of schedules || []) {
      try {
        const oldMessage = schedule.post_message;
        
        // Check if already has new copyright format
        if (oldMessage.includes('N·ªôi dung Video thu·ªôc v·ªÅ k√™nh')) {
          console.log(`‚è≠Ô∏è Schedule ${schedule.id} already has new copyright format`);
          continue;
        }
        
        // Update copyright format
        const channelName = schedule.channel_name || 'k√™nh g·ªëc';
        const newCopyright = `‚öñÔ∏èN·ªôi dung Video thu·ªôc v·ªÅ k√™nh ${channelName} - M·ªçi th√¥ng tin v·ªÅ s·∫£n ph·∫©m ƒë∆∞·ª£c tham kh·∫£o t·ª´ video. B·∫£n quy·ªÅn thu·ªôc v·ªÅ k√™nh g·ªëc.`;
        
        // Replace old copyright with new one
        let newMessage = oldMessage
          .replace(/‚öñÔ∏è B·∫£n quy·ªÅn video thu·ªôc v·ªÅ k√™nh g·ªëc\nM·ªçi quy·ªÅn thu·ªôc v·ªÅ k√™nh g·ªëc\. ƒê√¢y ch·ªâ l√† n·ªôi dung tham kh·∫£o\./g, newCopyright)
          .replace(/‚öñÔ∏è B·∫£n quy·ªÅn video thu·ªôc v·ªÅ .+\nM·ªçi quy·ªÅn thu·ªôc v·ªÅ k√™nh g·ªëc\. ƒê√¢y ch·ªâ l√† n·ªôi dung tham kh·∫£o\./g, newCopyright)
          .replace(/N·ªôi dung Video thu·ªôc v·ªÅ k√™nh .+ - M·ªçi th√¥ng tin v·ªÅ s·∫£n ph·∫©m ƒë∆∞·ª£c tham kh·∫£o t·ª´ video\. M·ªçi b·∫£ng quy·ªÅn thu·ªôc v·ªÅ k√™nh g·ªëc\./g, newCopyright);
        
        // If no old format found, add new copyright at the end before hashtags
        if (newMessage === oldMessage) {
          const hashtagIndex = newMessage.lastIndexOf('#');
          if (hashtagIndex > 0) {
            newMessage = newMessage.substring(0, hashtagIndex).trim() + '\n\n' + newCopyright + '\n\n' + newMessage.substring(hashtagIndex);
          } else {
            newMessage = newMessage.trim() + '\n\n' + newCopyright;
          }
        }
        
        // Update schedule
        const { error: updateError } = await supabaseAdmin
          .from('schedules')
          .update({ post_message: newMessage })
          .eq('id', schedule.id);
        
        if (updateError) {
          console.error(`‚ùå Error updating schedule ${schedule.id}:`, updateError);
          errors.push({ id: schedule.id, error: updateError.message });
        } else {
          console.log(`‚úÖ Updated schedule ${schedule.id} with new copyright format`);
          updatedCount++;
        }
        
      } catch (error) {
        console.error(`‚ùå Exception updating schedule ${schedule.id}:`, error);
        errors.push({ id: schedule.id, error: error instanceof Error ? error.message : String(error) });
      }
    }
    
    return NextResponse.json({
      success: true,
      totalSchedules: schedules?.length || 0,
      updatedCount,
      errors,
      message: `Updated ${updatedCount} schedules with new copyright format`
    });
    
  } catch (error) {
    console.error('‚ùå Exception in update schedules copyright:', error);
    return NextResponse.json({
      success: false,
      error: 'Update failed',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}
