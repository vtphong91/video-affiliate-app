/**
 * Schedule Message Formatter
 * 
 * ‚ö†Ô∏è QUAN TR·ªåNG: ƒê√¢y l√† function chu·∫©n cho vi·ªác t·∫°o post_message trong schedules.
 * KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI m√† kh√¥ng h·ªèi tr∆∞·ªõc!
 * 
 * Function n√†y ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n v·ªõi Facebook Post module v√† Cron Service.
 */

export interface ScheduleMessageParams {
  video_title: string;
  summary?: string;
  pros?: string[];
  cons?: string[];
  target_audience?: string[];
  seo_keywords?: string[];
  video_url: string;
  channel_name?: string;
  landing_url: string;
}

/**
 * T·∫°o post_message chu·∫©n cho schedules
 * D·ª±a tr√™n formatFacebookPost nh∆∞ng ph√π h·ª£p v·ªõi c·∫•u tr√∫c reviews table
 */
export function createSchedulePostMessage(params: ScheduleMessageParams): string {
  const {
    video_title,
    summary = 'ƒê√°nh gi√° chi ti·∫øt v·ªÅ s·∫£n ph·∫©m',
    pros = [],
    cons = [],
    target_audience = [],
    seo_keywords = [],
    video_url,
    channel_name,
    landing_url
  } = params;

  let message = `üî• ${video_title}\n\n`;

  // Summary
  message += `üìù ${summary}\n\n`;

  // Pros
  if (pros.length > 0) {
    message += '‚úÖ ∆ØU ƒêI·ªÇM:\n';
    pros.slice(0, 5).forEach((pro) => {
      message += `‚Ä¢ ${pro}\n`;
    });
    message += '\n';
  }

  // Cons
  if (cons.length > 0) {
    message += '‚ö†Ô∏è NH∆Ø·ª¢C ƒêI·ªÇM C·∫¶N L∆ØU √ù:\n';
    cons.slice(0, 3).forEach((con) => {
      message += `‚Ä¢ ${con}\n`;
    });
    message += '\n';
  }

  // Target Audience
  if (target_audience.length > 0) {
    message += 'üë• PH√ô H·ª¢P V·ªöI:\n';
    target_audience.forEach((audience) => {
      message += `‚Ä¢ ${audience}\n`;
    });
    message += '\n';
  }

  // Video link
  message += `üé• Xem video g·ªëc:\n${video_url}\n\n`;

  // Copyright notice
  const channelCredit = channel_name || 'k√™nh g·ªëc';
  message += `‚öñÔ∏è B·∫£n quy·ªÅn video thu·ªôc v·ªÅ ${channelCredit}\n`;
  message += `M·ªçi quy·ªÅn thu·ªôc v·ªÅ k√™nh g·ªëc. ƒê√¢y ch·ªâ l√† n·ªôi dung tham kh·∫£o.\n\n`;

  // Hashtags
  if (seo_keywords.length > 0) {
    const hashtags = seo_keywords
      .slice(0, 10)
      .map((k) => `#${k.replace(/\s+/g, '').replace(/[^\w\u00C0-\u1EF9]/g, '')}`);
    message += hashtags.join(' ');
  }

  return message;
}

/**
 * T·∫°o webhook payload chu·∫©n cho Make.com
 * ‚ö†Ô∏è QUAN TR·ªåNG: Function n√†y ph·∫£i t∆∞∆°ng th√≠ch v·ªõi Cron Service!
 */
export function createWebhookPayload(schedule: any) {
  return {
    scheduleId: schedule.id,
    reviewId: schedule.review_id,
    targetType: schedule.target_type,
    targetId: schedule.target_id,
    targetName: schedule.target_name,
    message: schedule.post_message,
    link: schedule.landing_page_url,
    imageUrl: schedule.video_thumbnail,
    videoUrl: schedule.video_url,
    videoTitle: schedule.video_title,
    channelName: schedule.channel_name,
    affiliateLinks: schedule.affiliate_links || 'ƒê·∫∑t s·∫£n ph·∫©m v·ªõi gi√° t·ªët t·∫°i: Kh√¥ng c√≥ th√¥ng tin',
    reviewSummary: schedule.review_summary,
    reviewPros: schedule.review_pros,
    reviewCons: schedule.review_cons,
    reviewKeyPoints: schedule.review_key_points,
    reviewTargetAudience: schedule.review_target_audience,
    reviewCta: schedule.review_cta,
    reviewSeoKeywords: schedule.review_seo_keywords,
    scheduledFor: schedule.scheduled_for,
    triggeredAt: new Date().toISOString(),
    retryAttempt: schedule.retry_count || 0,
  };
}
