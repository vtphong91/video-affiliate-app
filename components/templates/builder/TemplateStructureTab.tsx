'use client';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Info } from 'lucide-react';
import type { TemplateFormData } from '../TemplateBuilder';
import type { PromptConfig } from '@/types';

interface TemplateStructureTabProps {
  formData: TemplateFormData;
  updateConfig: (configUpdates: Partial<PromptConfig>) => void;
}

export function TemplateStructureTab({
  formData,
  updateConfig,
}: TemplateStructureTabProps) {
  const structure = formData.config.structure;

  const updateStructure = (key: keyof typeof structure, value: boolean) => {
    updateConfig({
      structure: {
        ...structure,
        [key]: value,
      },
    });
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertDescription>
          Ch·ªçn c√°c ph·∫ßn c·∫•u tr√∫c m√† b·∫°n mu·ªën AI t·∫°o ra trong n·ªôi dung. C·∫•u tr√∫c r√µ r√†ng gi√∫p n·ªôi dung d·ªÖ ƒë·ªçc v√† chuy√™n nghi·ªáp h∆°n.
        </AlertDescription>
      </Alert>

      {/* C·∫•u tr√∫c n·ªôi dung */}
      <Card>
        <CardHeader>
          <CardTitle>üìã C·∫•u tr√∫c n·ªôi dung</CardTitle>
          <CardDescription>
            Ch·ªçn c√°c ph·∫ßn b·∫°n mu·ªën xu·∫•t hi·ªán trong n·ªôi dung review
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="intro"
                checked={structure.intro}
                onChange={(e) => updateStructure('intro', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="intro" className="cursor-pointer">
                  <div className="font-medium">Ph·∫ßn m·ªü ƒë·∫ßu (Intro)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    Hook b·∫Øt m·∫Øt, gi·ªõi thi·ªáu s∆° l∆∞·ª£c v·ªÅ s·∫£n ph·∫©m/d·ªãch v·ª•
                  </p>
                </Label>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="hook"
                checked={structure.hook}
                onChange={(e) => updateStructure('hook', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="hook" className="cursor-pointer">
                  <div className="font-medium">Hook (C√¢u m√≥c)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    C√¢u ƒë·∫ßu ti√™n h·∫•p d·∫´n, thu h√∫t s·ª± ch√∫ √Ω ngay l·∫≠p t·ª©c
                  </p>
                </Label>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="summary"
                checked={structure.summary}
                onChange={(e) => updateStructure('summary', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="summary" className="cursor-pointer">
                  <div className="font-medium">T√≥m t·∫Øt t·ªïng quan (Summary)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    T√≥m t·∫Øt ng·∫Øn g·ªçn 3-5 ƒëi·ªÉm ch√≠nh v·ªÅ s·∫£n ph·∫©m
                  </p>
                </Label>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="keyPoints"
                checked={structure.keyPoints}
                onChange={(e) => updateStructure('keyPoints', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="keyPoints" className="cursor-pointer">
                  <div className="font-medium">ƒêi·ªÉm n·ªïi b·∫≠t (Key Points)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    Li·ªát k√™ c√°c t√≠nh nƒÉng, ƒëi·ªÉm m·∫°nh quan tr·ªçng nh·∫•t
                  </p>
                </Label>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="prosCons"
                checked={structure.prosCons}
                onChange={(e) => updateStructure('prosCons', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="prosCons" className="cursor-pointer">
                  <div className="font-medium">∆Øu/Nh∆∞·ª£c ƒëi·ªÉm (Pros & Cons)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    ƒê√°nh gi√° c√¢n b·∫±ng c·∫£ ƒëi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu
                  </p>
                </Label>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="comparison"
                checked={structure.comparison}
                onChange={(e) => updateStructure('comparison', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="comparison" className="cursor-pointer">
                  <div className="font-medium">So s√°nh (Comparison)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    So s√°nh v·ªõi c√°c s·∫£n ph·∫©m ƒë·ªëi th·ªß c√πng ph√¢n kh√∫c
                  </p>
                </Label>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="priceAnalysis"
                checked={structure.priceAnalysis}
                onChange={(e) => updateStructure('priceAnalysis', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="priceAnalysis" className="cursor-pointer">
                  <div className="font-medium">Ph√¢n t√≠ch gi√° (Price Analysis)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    ƒê√°nh gi√° gi√° tr·ªã so v·ªõi gi√° ti·ªÅn, t√≠nh c·∫°nh tranh
                  </p>
                </Label>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="verdict"
                checked={structure.verdict}
                onChange={(e) => updateStructure('verdict', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="verdict" className="cursor-pointer">
                  <div className="font-medium">ƒê√°nh gi√° cu·ªëi (Verdict)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    K·∫øt lu·∫≠n t·ªïng th·ªÉ, ƒë√°nh gi√° chung v·ªÅ s·∫£n ph·∫©m
                  </p>
                </Label>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
              <input
                type="checkbox"
                id="callToAction"
                checked={structure.callToAction}
                onChange={(e) => updateStructure('callToAction', e.target.checked)}
                className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div className="flex-1">
                <Label htmlFor="callToAction" className="cursor-pointer">
                  <div className="font-medium">Call-to-Action (CTA)</div>
                  <p className="text-xs text-gray-500 mt-1">
                    L·ªùi k√™u g·ªçi h√†nh ƒë·ªông: mua h√†ng, ƒëƒÉng k√Ω, t√¨m hi·ªÉu th√™m...
                  </p>
                </Label>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* T√πy ch·ªçn b·ªï sung */}
      <Card>
        <CardHeader>
          <CardTitle>‚ö° T√πy ch·ªçn b·ªï sung</CardTitle>
          <CardDescription>
            C√°c t√≠nh nƒÉng n√¢ng cao cho n·ªôi dung
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
            <input
              type="checkbox"
              id="seoOptimized"
              checked={formData.config.seoOptimized}
              onChange={(e) => updateConfig({ seoOptimized: e.target.checked })}
              className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <div className="flex-1">
              <Label htmlFor="seoOptimized" className="cursor-pointer">
                <div className="font-medium">SEO Optimized</div>
                <p className="text-xs text-gray-500 mt-1">
                  T·ªëi ∆∞u h√≥a cho c√¥ng c·ª• t√¨m ki·∫øm (keywords, meta description...)
                </p>
              </Label>
            </div>
          </div>

          <div className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors">
            <input
              type="checkbox"
              id="includeTimestamps"
              checked={formData.config.includeTimestamps}
              onChange={(e) => updateConfig({ includeTimestamps: e.target.checked })}
              className="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <div className="flex-1">
              <Label htmlFor="includeTimestamps" className="cursor-pointer">
                <div className="font-medium">Bao g·ªìm Timestamps</div>
                <p className="text-xs text-gray-500 mt-1">
                  Th√™m timestamps cho video review (00:15, 01:30...)
                </p>
              </Label>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Preview c·∫•u tr√∫c */}
      <Card className="bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle className="text-blue-900">üëÄ Preview C·∫•u tr√∫c</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2 text-sm">
            {structure.hook && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">1. Hook - C√¢u m√≥c h·∫•p d·∫´n</span>
              </div>
            )}
            {structure.intro && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">2. Intro - Gi·ªõi thi·ªáu s∆° l∆∞·ª£c</span>
              </div>
            )}
            {structure.summary && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">3. Summary - T√≥m t·∫Øt t·ªïng quan</span>
              </div>
            )}
            {structure.keyPoints && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">4. Key Points - ƒêi·ªÉm n·ªïi b·∫≠t</span>
              </div>
            )}
            {structure.prosCons && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">5. Pros & Cons - ∆Øu/Nh∆∞·ª£c ƒëi·ªÉm</span>
              </div>
            )}
            {structure.comparison && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">6. Comparison - So s√°nh</span>
              </div>
            )}
            {structure.priceAnalysis && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">7. Price Analysis - Ph√¢n t√≠ch gi√°</span>
              </div>
            )}
            {structure.verdict && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">8. Verdict - ƒê√°nh gi√° cu·ªëi</span>
              </div>
            )}
            {structure.callToAction && (
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="font-medium">9. Call-to-Action - K√™u g·ªçi h√†nh ƒë·ªông</span>
              </div>
            )}

            {!Object.values(structure).some(Boolean) && (
              <p className="text-gray-500 italic">
                Ch∆∞a ch·ªçn ph·∫ßn n√†o. H√£y ch·ªçn √≠t nh·∫•t 1 ph·∫ßn c·∫•u tr√∫c.
              </p>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
