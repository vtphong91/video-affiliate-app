'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Info, Plus, X } from 'lucide-react';
import type { TemplateFormData } from '../TemplateBuilder';

interface TemplateAdvancedTabProps {
  formData: TemplateFormData;
  updateFormData: (updates: Partial<TemplateFormData>) => void;
}

export function TemplateAdvancedTab({
  formData,
  updateFormData,
}: TemplateAdvancedTabProps) {
  const [newDo, setNewDo] = useState('');
  const [newDont, setNewDont] = useState('');
  const [newVarKey, setNewVarKey] = useState('');
  const [newVarValue, setNewVarValue] = useState('');

  const addDoItem = () => {
    if (!newDo.trim()) return;
    updateFormData({
      constraints: {
        ...formData.constraints,
        do_list: [...formData.constraints.do_list, newDo.trim()],
      },
    });
    setNewDo('');
  };

  const removeDo = (index: number) => {
    const newList = formData.constraints.do_list.filter((_, i) => i !== index);
    updateFormData({
      constraints: {
        ...formData.constraints,
        do_list: newList,
      },
    });
  };

  const addDontItem = () => {
    if (!newDont.trim()) return;
    updateFormData({
      constraints: {
        ...formData.constraints,
        dont_list: [...formData.constraints.dont_list, newDont.trim()],
      },
    });
    setNewDont('');
  };

  const removeDont = (index: number) => {
    const newList = formData.constraints.dont_list.filter((_, i) => i !== index);
    updateFormData({
      constraints: {
        ...formData.constraints,
        dont_list: newList,
      },
    });
  };

  const addVariable = () => {
    if (!newVarKey.trim()) return;
    updateFormData({
      example_input: {
        ...formData.example_input,
        [newVarKey.trim()]: newVarValue.trim(),
      },
    });
    setNewVarKey('');
    setNewVarValue('');
  };

  const removeVariable = (key: string) => {
    const newVars = { ...formData.example_input };
    delete newVars[key];
    updateFormData({ example_input: newVars });
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertDescription>
          Tab n√†y bao g·ªìm <strong>5 y·∫øu t·ªë n√¢ng cao</strong>: Constraints, Examples, Tone & Style Extended, AI Parameters v√† Additional Notes.
        </AlertDescription>
      </Alert>

      {/* Element 5: Constraints */}
      <Card>
        <CardHeader>
          <CardTitle>üö¶ R√†ng bu·ªôc (Constraints)</CardTitle>
          <CardDescription>
            <strong>Y·∫øu t·ªë 5:</strong> Danh s√°ch nh·ªØng g√¨ N√äN l√†m v√† KH√îNG N√äN l√†m
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-3">
            <Label>Danh s√°ch N√äN l√†m (DO)</Label>
            <div className="flex gap-2">
              <Input
                placeholder="VD: S·ª≠ d·ª•ng s·ªë li·ªáu c·ª• th·ªÉ khi so s√°nh"
                value={newDo}
                onChange={(e) => setNewDo(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addDoItem()}
              />
              <Button type="button" size="sm" onClick={addDoItem}>
                <Plus className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex flex-wrap gap-2">
              {formData.constraints.do_list.map((item, index) => (
                <Badge
                  key={index}
                  variant="default"
                  className="gap-1 bg-green-100 text-green-800 hover:bg-green-200"
                >
                  ‚úì {item}
                  <X
                    className="h-3 w-3 cursor-pointer"
                    onClick={() => removeDo(index)}
                  />
                </Badge>
              ))}
            </div>
          </div>

          <div className="space-y-3">
            <Label>Danh s√°ch KH√îNG N√äN l√†m (DON'T)</Label>
            <div className="flex gap-2">
              <Input
                placeholder="VD: Kh√¥ng d√πng t·ª´ ng·ªØ thi·∫øu kh√°ch quan"
                value={newDont}
                onChange={(e) => setNewDont(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addDontItem()}
              />
              <Button type="button" size="sm" onClick={addDontItem}>
                <Plus className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex flex-wrap gap-2">
              {formData.constraints.dont_list.map((item, index) => (
                <Badge
                  key={index}
                  variant="destructive"
                  className="gap-1"
                >
                  ‚úó {item}
                  <X
                    className="h-3 w-3 cursor-pointer"
                    onClick={() => removeDont(index)}
                  />
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Element 6: Examples */}
      <Card>
        <CardHeader>
          <CardTitle>üìö V√≠ d·ª• m·∫´u (Examples)</CardTitle>
          <CardDescription>
            <strong>Y·∫øu t·ªë 6:</strong> Input m·∫´u v√† Output m·∫´u ƒë·ªÉ AI h·ªçc theo
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-3">
            <Label>Example Input (Bi·∫øn m·∫´u)</Label>
            <div className="grid grid-cols-2 gap-2">
              <Input
                placeholder="T√™n bi·∫øn (VD: product_name)"
                value={newVarKey}
                onChange={(e) => setNewVarKey(e.target.value)}
              />
              <div className="flex gap-2">
                <Input
                  placeholder="Gi√° tr·ªã m·∫´u (VD: iPhone 15 Pro Max)"
                  value={newVarValue}
                  onChange={(e) => setNewVarValue(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && addVariable()}
                />
                <Button type="button" size="sm" onClick={addVariable}>
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
            </div>

            <div className="space-y-2">
              {Object.entries(formData.example_input).map(([key, value]) => (
                <div
                  key={key}
                  className="flex items-center justify-between p-2 bg-gray-50 rounded border"
                >
                  <div>
                    <code className="text-sm font-mono text-blue-600">{`{{${key}}}`}</code>
                    <span className="text-gray-400 mx-2">‚Üí</span>
                    <span className="text-sm">{value}</span>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => removeVariable(key)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              ))}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="example_output">Example Output (K·∫øt qu·∫£ m·∫´u)</Label>
            <Textarea
              id="example_output"
              placeholder="D√°n m·ªôt b√†i review m·∫´u ho√†n ch·ªânh m√† b·∫°n mu·ªën AI h·ªçc theo..."
              rows={6}
              value={formData.example_output}
              onChange={(e) => updateFormData({ example_output: e.target.value })}
            />
            <p className="text-xs text-gray-500">
              üí° M·∫πo: Cung c·∫•p 1-2 v√≠ d·ª• output ch·∫•t l∆∞·ª£ng gi√∫p AI hi·ªÉu r√µ h∆°n phong c√°ch b·∫°n mong mu·ªën
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Element 7: Tone & Style Extended */}
      <Card>
        <CardHeader>
          <CardTitle>üé® Tone & Style (M·ªü r·ªông)</CardTitle>
          <CardDescription>
            <strong>Y·∫øu t·ªë 7:</strong> C√°c t√πy ch·ªçn n√¢ng cao v·ªÅ gi·ªçng ƒëi·ªáu v√† phong c√°ch
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="formality">Formality (T√≠nh trang tr·ªçng)</Label>
              <Select
                value={formData.config.formality}
                onValueChange={(value: any) =>
                  updateFormData({
                    config: { ...formData.config, formality: value },
                  })
                }
              >
                <SelectTrigger id="formality">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="formal">Formal (Trang tr·ªçng)</SelectItem>
                  <SelectItem value="neutral">Neutral (Trung l·∫≠p)</SelectItem>
                  <SelectItem value="informal">Informal (Th√¢n m·∫≠t)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="perspective">Perspective (G√≥c nh√¨n)</Label>
              <Select
                value={formData.config.perspective}
                onValueChange={(value: any) =>
                  updateFormData({
                    config: { ...formData.config, perspective: value },
                  })
                }
              >
                <SelectTrigger id="perspective">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="first_person">First Person (T√¥i, m√¨nh)</SelectItem>
                  <SelectItem value="second_person">Second Person (B·∫°n)</SelectItem>
                  <SelectItem value="third_person">Third Person (H·ªç, ng∆∞·ªùi d√πng)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="emotional_tone">Emotional Tone</Label>
              <Select
                value={formData.config.emotional_tone}
                onValueChange={(value: any) =>
                  updateFormData({
                    config: { ...formData.config, emotional_tone: value },
                  })
                }
              >
                <SelectTrigger id="emotional_tone">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="enthusiastic">Enthusiastic (Nhi·ªát t√¨nh)</SelectItem>
                  <SelectItem value="balanced">Balanced (C√¢n b·∫±ng)</SelectItem>
                  <SelectItem value="critical">Critical (Ph√™ b√¨nh)</SelectItem>
                  <SelectItem value="inspirational">Inspirational (Truy·ªÅn c·∫£m h·ª©ng)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="punctuation_style">Punctuation Style</Label>
              <Select
                value={formData.config.punctuation_style}
                onValueChange={(value: any) =>
                  updateFormData({
                    config: { ...formData.config, punctuation_style: value },
                  })
                }
              >
                <SelectTrigger id="punctuation_style">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="neutral">Neutral (B√¨nh th∆∞·ªùng)</SelectItem>
                  <SelectItem value="exclamatory">Exclamatory (Nhi·ªÅu d·∫•u !)</SelectItem>
                  <SelectItem value="question-based">Question-based (Nhi·ªÅu d·∫•u ?)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Element 9: AI Parameters */}
      <Card>
        <CardHeader>
          <CardTitle>ü§ñ AI Parameters</CardTitle>
          <CardDescription>
            <strong>Y·∫øu t·ªë 9:</strong> Tham s·ªë ƒëi·ªÅu ch·ªânh h√†nh vi c·ªßa AI
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Label>Temperature</Label>
              <span className="text-sm font-mono bg-gray-100 px-2 py-1 rounded">
                {formData.ai_parameters.temperature.toFixed(1)}
              </span>
            </div>
            <input
              type="range"
              min="0"
              max="1"
              step="0.1"
              value={formData.ai_parameters.temperature}
              onChange={(e) =>
                updateFormData({
                  ai_parameters: { ...formData.ai_parameters, temperature: parseFloat(e.target.value) },
                })
              }
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
            />
            <p className="text-xs text-gray-500">
              0.0 = Ch√≠nh x√°c, nh·∫•t qu√°n | 1.0 = S√°ng t·∫°o, ƒëa d·∫°ng
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="max_tokens">Max Tokens</Label>
            <Input
              id="max_tokens"
              type="number"
              min="100"
              max="4000"
              value={formData.ai_parameters.max_tokens}
              onChange={(e) =>
                updateFormData({
                  ai_parameters: {
                    ...formData.ai_parameters,
                    max_tokens: parseInt(e.target.value) || 2048,
                  },
                })
              }
            />
            <p className="text-xs text-gray-500">
              S·ªë l∆∞·ª£ng tokens t·ªëi ƒëa AI c√≥ th·ªÉ t·∫°o ra (1 token ‚âà 0.75 t·ª´ ti·∫øng Anh, 0.5 t·ª´ ti·∫øng Vi·ªát)
            </p>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <Label>Top P</Label>
                <span className="text-sm font-mono bg-gray-100 px-2 py-1 rounded">
                  {(formData.ai_parameters.top_p || 0.9).toFixed(2)}
                </span>
              </div>
              <input
                type="range"
                min="0"
                max="1"
                step="0.05"
                value={formData.ai_parameters.top_p || 0.9}
                onChange={(e) =>
                  updateFormData({
                    ai_parameters: { ...formData.ai_parameters, top_p: parseFloat(e.target.value) },
                  })
                }
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
              />
              <p className="text-xs text-gray-500">Gi·ªõi h·∫°n ph·∫°m vi t·ª´ v·ª±ng</p>
            </div>

            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <Label>Frequency Penalty</Label>
                <span className="text-sm font-mono bg-gray-100 px-2 py-1 rounded">
                  {(formData.ai_parameters.frequency_penalty || 0).toFixed(1)}
                </span>
              </div>
              <input
                type="range"
                min="-2"
                max="2"
                step="0.1"
                value={formData.ai_parameters.frequency_penalty || 0}
                onChange={(e) =>
                  updateFormData({
                    ai_parameters: { ...formData.ai_parameters, frequency_penalty: parseFloat(e.target.value) },
                  })
                }
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
              />
              <p className="text-xs text-gray-500">Gi·∫£m l·∫∑p t·ª´</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Element 8: Feedback Loop */}
      <Card>
        <CardHeader>
          <CardTitle>üîÑ Feedback Loop</CardTitle>
          <CardDescription>
            <strong>Y·∫øu t·ªë 8:</strong> H∆∞·ªõng d·∫´n AI t·ª± ki·ªÉm tra v√† c·∫£i thi·ªán k·∫øt qu·∫£
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Textarea
            id="feedback_instructions"
            placeholder="VD: Sau khi t·∫°o n·ªôi dung, h√£y t·ª± ki·ªÉm tra xem ƒë√£ ƒë√°p ·ª©ng ƒë·ªß c√°c y√™u c·∫ßu ch∆∞a: C√≥ ƒë·ªß emoji ch∆∞a? C√≥ CTA m·∫°nh m·∫Ω ch∆∞a? ƒê·ªô d√†i c√≥ ph√π h·ª£p ch∆∞a?"
            rows={3}
            value={formData.feedback_instructions}
            onChange={(e) => updateFormData({ feedback_instructions: e.target.value })}
          />
        </CardContent>
      </Card>

      {/* Element 10: Additional Notes */}
      <Card>
        <CardHeader>
          <CardTitle>üìù Ghi ch√∫ b·ªï sung</CardTitle>
          <CardDescription>
            <strong>Y·∫øu t·ªë 10:</strong> Th√¥ng tin th√™m, tips, tricks, ∆∞u ti√™n
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Textarea
            id="additional_notes"
            placeholder="VD: Lu√¥n k·∫øt th√∫c b·∫±ng CTA m·∫°nh. ∆Øu ti√™n s·ª≠ d·ª•ng t·ª´ ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu. Tham kh·∫£o phong c√°ch c·ªßa k√™nh XYZ..."
            rows={4}
            value={formData.additional_notes}
            onChange={(e) => updateFormData({ additional_notes: e.target.value })}
          />
        </CardContent>
      </Card>
    </div>
  );
}
